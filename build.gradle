plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
	accessWidener = file("src/main/resources/quadz.accesswidener")
}

repositories {
	maven { url 'https://lazurite.dev/releases' }
	maven { url 'https://maven.shedaniel.me/' }
	maven { url 'https://maven.blamejared.com/' }
	maven { url 'https://hephaestus.dev/release' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://ladysnake.jfrog.io/artifactory/mods' }
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
	// Minecraft + Yarn
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Gecko Lib 3
	modImplementation "software.bernie.geckolib:${project.geckolib_version}:dev"

	// Rayon
	modImplementation "dev.lazurite:rayon-core:${project.rayon_version}"
	modImplementation "dev.lazurite:rayon-entity:${project.rayon_version}"

	// Lattice
	modImplementation "dev.lazurite:lattice:${project.lattice_version}"
	include "dev.lazurite:lattice:${project.lattice_version}"

	// Mod Menu + Cloth
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") { exclude(group: "net.fabricmc.fabric-api") }

	// Fiber
	modImplementation "me.zeroeightsix:fiber:${project.fiber_version}"
	include "me.zeroeightsix:fiber:${project.fiber_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	it.options.release = 16

}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = 'quadz'

			pom {
				name = 'Quadz'
				description = 'An FPV quadcopter simulator for Minecraft.'
				url = 'https://github.com/LazuriteMC/Quadz'
				developers {
					developer {
						id = 'bluevista'
						name = 'BlueVista'
						email = 'ethan@ejohnsons.com'
					}
				}
			}

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			artifact(remapJar) {
				builtBy remapJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()

		maven {
			url = 'https://lazurite.dev/maven/releases'
			credentials {
				username = project.property("publish.lazurite.alias")
				password = project.property("publish.lazurite.secret")
			}
		}
	}
}